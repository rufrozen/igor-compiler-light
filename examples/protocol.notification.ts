// Author: Igor light compiler
// Compiler version: igorc 0.2.1
// DO NOT EDIT THIS FILE - it is machine generated

import {Subject} from "rxjs/Rx";
import * as Protocol from "./protocol.data"

export class ProtocolNotification
{
    constructor(public kind: string) { }
}

export class NotifyData1Notification extends ProtocolNotification
{
    payload: Protocol.NotifyRecord;
    
    constructor(json: Object)
    {
        super(json['kind']);
        this.payload = Protocol.NotifyRecord.fromJson(json['payload']);
    }
}

export class NotifyData2Notification extends ProtocolNotification
{
    payload: Protocol.NotifyData2;
    
    constructor(json: Object)
    {
        super(json['kind']);
        this.payload = Protocol.NotifyData2.fromJson(json['payload']);
    }
}

export class NotifyData3Notification extends ProtocolNotification
{
    payload: number;
    
    constructor(json: Object)
    {
        super(json['kind']);
        this.payload = <number>json['payload'];
    }
}

export class NotifyEmptyNotification extends ProtocolNotification
{
    payload: any;
    
    constructor(json: Object)
    {
        super(json['kind']);
        this.payload = null;
    }
}


export abstract class ProtocolNotificationService
{
    notifyData1 = new Subject<NotifyData1Notification>();
    notifyData2 = new Subject<NotifyData2Notification>();
    notifyData3 = new Subject<NotifyData3Notification>();
    notifyEmpty = new Subject<NotifyEmptyNotification>();

    constructor() { }

    push(message: Object)
    {
        switch (message['kind'])
        {
            case 'diffrent_kind': this.notifyData1.next(new NotifyData1Notification(message)); break;
            case 'notify_data2': this.notifyData2.next(new NotifyData2Notification(message)); break;
            case 'notify_data3': this.notifyData3.next(new NotifyData3Notification(message)); break;
            case 'notify_empty': this.notifyEmpty.next(new NotifyEmptyNotification(message)); break;
            default: this.unknown(message); break;
        }
    }

    unknown(message: Object)
    {
        console.log('Unknown notification', JSON.stringify(message));
    }
}
